class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        m, n = len(matrix), len(matrix[0])

        # 2D prefix sum
        ps = [[0]*(n+1) for _ in range(m+1)]

        for i in range(1, m+1):
            for j in range(1, n+1):
                ps[i][j] = ps[i][j-1] + ps[i-1][j] - ps[i-1][j-1] + matrix[i-1][j-1]
        
        count = 0
        for r1 in range(1, m+1):
            for r2 in range(r1, m+1):
                dt = defaultdict(int)
                dt[0] = 1

                for col in range(1, n+1):
                    curr_sum = ps[r2][col] - ps[r1 - 1][col]
                    count += dt[curr_sum - target]
                    dt[curr_sum] += 1

        return count
